import { expect } from "chai";
import { ECDSA, EC } from "../src/crypto";

describe("ECDSA", () => {
    const privateKey = 73465813435010424130020467409668748140716258667324402470139896679062606285692n;
    const publicKey = new EC.Point(90486017179026945568472608928307233100641538678588916969628892322999591512177n, 66244442082038220356396908932328570057153397800294142887276863990959672792850n);
    const hash = 83814198383102558219731078260892729932246618004265700685467928187377105751529n;

    const tests = [
        { k: 12836840386551811045291024715397198349482731007124014698420768497308293459824n, sign: new ECDSA.Sign(100533106132192884944618944218616790743118227857393542517450380671035328126032n, 671238690200961364332384184366044976092724326211649260908421678786220371159n), hex: '04de43b8bc21e5bb841a24567f236251c48d5ddd1c7abe242ab76e653a49eb5c50017be85ac860d870b0581e2cd1e2a26c84c326e285e3cf56cfc527c0e82bacd7' },
        { k: 8625479182865965891178108936612933449635392474221249247764262504225370167238n, sign: new ECDSA.Sign(38181012822310274927664423750874583678493516408254568537835597860237064268003n, 89814959807656188353731063684719883456646968771021037352077114524181264856899n), hex: '045469affbfff882fcb406163001f6a59506d2fd00fd3464659b50f4bc3057e8e3c691773d6c4af4f351fddf06f4c08e6d16af1cbd421bcd9eaa69ef44588ff743' },
        { k: 61972943152038378813094050034797638892156071242500775568205136150994274761738n, sign: new ECDSA.Sign(58364293740903006373883631089235759980630278196230775754952447144351033906569n, 60249192009996138711046766942626204125856449954738577779801460611117801854132n), hex: '04810905053e2b49994c4cefc4a1708dff1ae3783b5989d7f036c3ddfb14d2d5898533d58fc63553ff448696e75477b77061b54389e9b56504bec2c14369f0d4b4' },
        { k: 102279490694915775304257245935630396824252443219600689436522332401679782243737n, sign: new ECDSA.Sign(21435556528937726841764610775632781775891766958139966848263609095188919093669n, 48394970288303383800289129015982760638151329197106081625604802739654012631515n), hex: '042f641855349789d89922be9d2baf9b4080cacbd61c84e223b9d8f55249a809a56afe951e8e9e0de9c28e5ab23c06c0bc49c524b928fe84372abf425f0a1af9db' }
    ];

    EC.secp256k1.prepare();
    EC.secp256k1.prepare(publicKey);

    it("creates random sign", () => tests.forEach((test, i) => {
        // repeat sign comparsion with previous calculated sign and test sign as initial comparsion sign
        for (let j = 0, a = test.sign, b: ECDSA.Sign; b = ECDSA.sign(hash, privateKey), j < 3; ++j, a = b)
            expect(b).not.deep.contains(a, `i=${i} j=${j}`);
    }));

    it("creates same sign with fixed k", () => tests.forEach((test, index) => expect(ECDSA.sign(hash, privateKey, test.k)).deep.equals(test.sign, index.toString())));
    it("verifies sign", () => tests.forEach((test, index) => expect(ECDSA.verify(hash, publicKey, test.sign), index.toString()).is.true));
    it("serializes sign to hex", () => tests.forEach((test, index) => expect(test.sign.toHex()).equals(test.hex, index.toString())));
    it("deserializes sign from hex", () => tests.forEach((test, index) => expect(ECDSA.Sign.fromHex(test.hex)).deep.contains(test.sign, index.toString())));
});